Inventory file 

# cat hosts 

[devservers] 

devserver1 

devserver2 

devserver3 

devserver4 

  

[testservers] 

testserver1 

testserver2 

  

[webservers] 

webnode1 

webnode2 

  

  

[root@ansible-master ansible]# ansible dev-redhat -m shell -a “uname -a;uptime” 

[root@ansible-master ansible]# ansible dev-redhat -m shell -a “ps -eaf | grep apache” 

[root@ansible-master ansible]# ansible dev-redhat -m shell -a “systemctl stop httpd.service” 

[root@ansible-master ansible]# cat linuxpatching.yml 

  

  

OS patching playbook 

  

--- 

## Demo Ansible Playbook to perform patching on RHEL Server 

- name: os patching playbook 

  hosts: devservers 

  gather_facts: yes 

  user: ansadm 

  become: yes 

  serial: 2    ##The serial keyword can be used to limit the number of hosts that the playbook runs on at once. 

  

tasks: 

  

# purpose of this task to check if application is running or stopped 

- name: verify application/database processes are not running 

  shell: if ps -eaf | egrep 'apache|http|pmon|smon|moogsoft'|grep -v grep > /dev/null ;then echo "process_running";else echo "process_not_running";fi 

  ignore_errors: true 

  register: app_process_check 

  

# this task is decision, play will fail/quit, if application is running 

- name: decision point to start patching 

  fail: msg="{{ inventory_hostname }} have running Application. Please stop the application first, then attempt patching." 

  when: app_process_check.stdout == "process_running" 

  

# purpose of this task to refresh the subscription and sync repositories with Red Hat satellite 

- name: refresh subscription-manager and sync repositories 

  shell: /usr/bin/subscription-manager refresh; /usr/bin/yum clean all; /usr/bin/yum repolist 

  ignore_errors: true 

  when: ansible_distribution == 'Red Hat Enterprise Linux' 

  

# this task will upgrade/install the rpm’s if application is stopped 

- name: upgrade all packages on the server 

  yum: 

     name="*" 

     state=latest 

    #security=yes    ##only installs updates that have been marked security related. 

    #update_cache=yes 

  when: app_process_check.stdout == "process_not_running" and ansible_distribution == 'Red Hat Enterprise Linux' 

  register: yum_update 

  

# this task is to check if kernel update happened and system needs reboot or not 

- name: check if reboot required after kernel update. 

  shell: KERNEL_NEW=$(rpm -q –last kernel |head -1 | awk '{print $1}' | sed 's/kernel-//'); KERNEL_NOW=$(uname -r); if [[ $KERNEL_NEW != $KERNEL_NOW ]]; then echo "reboot_needed"; else echo "reboot_not_needed"; fi 

  ignore_errors: true 

  register: reboot_required 

  

# this task is to restart the system 

- name: restart system 

  command: shutdown -r +1 "Rebooting System After Patching" 

  async: 0 

  poll: 0 

  when: reboot_required.stdout == "reboot_needed" 

  register: reboot_started 

  ignore_errors: true 

  

# this task is to wait for 3 minutes for system to come up after the reboot 

- name: pause for 180 secs 

  pause: 

    minutes: 3 

  

# this task is to confirm, system is up and responding to ssh 

- name: check if system responding to ssh 

  local_action: 

     module: wait_for 

        host={{ inventory_hostname }} 

        port=22 

        delay=15 

        timeout=300 

        state=started 

  when: reboot_started|changed 

  

------------------------------------------------------------------------------------ 

  

[ansadm@server1 sys_mgmt]$ cat playbook_ospatching.yml 

  

--- 

## Demo Ansible Playbook to perform patching on RHEL Server 

- name: os patching playbook 

  hosts: devservers 

  gather_facts: yes 

  user: ansadm 

  become: yes 

  serial: 2    ##The serial keyword can be used to limit the number of hosts that the playbook runs on at once. 

  

  tasks: 

  

  # purpose of this task to check if application is running or stopped 

      - name: verify application/database processes are not running 

        shell: if ps -eaf | egrep 'apache|http|pmon|smon|moogsoft'|grep -v grep > /dev/null ;then echo 'process_running';else echo 'process_not_running';fi 

        ignore_errors: true 

        register: app_process_check 

  

  # this task is decision, play will fail/quit, if application is running 

      - name: decision point to start patching 

        fail: msg="{{ inventory_hostname }} have running Application. Please stop the application first, then attempt patching." 

        when: app_process_check.stdout == "process_running" 

  

  # purpose of this task to refresh the subscription and sync repositories with Red Hat satellite 

      - name: refresh subscription-manager and sync repositories 

        shell: /usr/bin/subscription-manager refresh; /usr/bin/yum clean all; /usr/bin/yum repolist 

        ignore_errors: true 

        when: ansible_distribution == 'Red Hat Enterprise Linux' 

  

  # This task will upgrade/install the rpm’s if application is stopped 

      - name: upgrade all packages on the server 

        yum: 

           name="*" 

           state=latest 

          #security=yes    ##only installs updates that have been marked security related. 

          #update_cache=yes 

        when: app_process_check.stdout == "process_not_running" and ansible_distribution == 'Red Hat Enterprise Linux' 

        register: yum_update 

                                                                                                                                                                      

  # this task is to check if kernel update happened and system needs reboot or not 

      - name: check if reboot required after kernel update. 

        shell: KERNEL_NEW=$(rpm -q –last kernel |head -1 | awk '{print $1}' | sed 's/kernel-//'); KERNEL_NOW=$(uname -r); if [[ $KERNEL_NEW != $KERNEL_NOW ]]; then echo "reboot_needed"; else echo "reboot_not_needed"; fi 

        ignore_errors: true 

        register: reboot_required 

                                                                                                                                                                      

  # this task is to restart the system 

      - name: restart system 

        command: shutdown -r +1 "Rebooting System After Patching" 

        async: 0 

        poll: 0 

        when: reboot_required.stdout == "reboot_needed" 

        register: reboot_started 

        ignore_errors: true 

                                                                                                                                                                                                                                                                                                                                           

  # this task is to wait for 3 minutes for system to come up after the reboot 

      - name: pause for three minutes 

        pause: 

          minutes: 3 

                                                                                                                                                                                                                                                                                                                                           

  # this task is to confirm, system is up and responding to ssh 

      - name: check if system responding to ssh 

        local_action: 

           module: wait_for 

             host={{ inventory_hostname }} 

             port=22 

             delay=15 

             timeout=300 

             state=started 

        when: reboot_started|changed 

                                                                                                                                                                                                                                                                                                                                           

  

[ansadm@server1 sys_mgmt]$ 

 